{"version":3,"file":"ksakira10-ngx-via-cep.umd.js.map","sources":["ng://@ksakira10/ngx-via-cep/lib/ngx-via-cep.variables.ts","ng://@ksakira10/ngx-via-cep/lib/ngx-via-cep.configuration.ts","ng://@ksakira10/ngx-via-cep/lib/ngx-via-cep.service.ts","ng://@ksakira10/ngx-via-cep/lib/ngx-via-cep.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface NgxViaCepConfigurationParameters {\n  apiKeys?: {[ key: string ]: string};\n  username?: string;\n  password?: string;\n  accessToken?: string | (() => string);\n  basePath?: string;\n  withCredentials?: boolean;\n}\n\nexport class NgxViaCepConfiguration {\n  apiKeys?: {[ key: string ]: string};\n  username?: string;\n  password?: string;\n  accessToken?: string | (() => string);\n  basePath?: string;\n  withCredentials?: boolean;\n\n  constructor(configurationParameters: NgxViaCepConfigurationParameters = {}) {\n      this.apiKeys = configurationParameters.apiKeys;\n      this.username = configurationParameters.username;\n      this.password = configurationParameters.password;\n      this.accessToken = configurationParameters.accessToken;\n      this.basePath = configurationParameters.basePath;\n      this.withCredentials = configurationParameters.withCredentials;\n  }\n\n  /**\n   * Select the correct content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param contentTypes - the array of content types that are available for selection\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  public selectHeaderContentType (contentTypes: string[]): string | undefined {\n      if (contentTypes.length == 0) {\n          return undefined;\n      }\n\n      let type = contentTypes.find(x => this.isJsonMime(x));\n      if (type === undefined) {\n          return contentTypes[0];\n      }\n      return type;\n  }\n\n  /**\n   * Select the correct accept content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param accepts - the array of content types that are available for selection.\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  public selectHeaderAccept(accepts: string[]): string | undefined {\n      if (accepts.length == 0) {\n          return undefined;\n      }\n\n      let type = accepts.find(x => this.isJsonMime(x));\n      if (type === undefined) {\n          return accepts[0];\n      }\n      return type;\n  }\n\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  public isJsonMime(mime: string): boolean {\n      const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n      return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n}\n","import {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders\n} from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { NgxViaCepConfiguration } from './ngx-via-cep.configuration';\nimport { BASE_PATH } from './ngx-via-cep.variables';\n\n@Injectable()\nexport class NgxViaCepService {\n  protected basePath = 'https://viacep.com.br/ws';\n  public defaultHeaders = new HttpHeaders();\n  public configuration = new NgxViaCepConfiguration();\n  private readonly urlFetchByCEP = (cep: string) =>\n    `${this.basePath}/${cep}/json/`;\n  private readonly urlFetchByAddressSP = (\n    address: string,\n    state: string = 'SP',\n    city: string = 'SÃ£o Paulo'\n  ) =>\n    `${this.basePath}/${encodeURIComponent(state)}/${encodeURIComponent(\n      city\n    )}/${encodeURIComponent(address)}/json/`;\n\n  constructor(\n    protected http: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: NgxViaCepConfiguration\n  ) {\n    if (basePath) {\n      this.basePath = basePath;\n    }\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = basePath || configuration.basePath || this.basePath;\n    }\n  }\n\n  public fetchByCEP = (cep: string): Observable<any> => {\n    const subject = new Subject<HttpErrorResponse>();\n    cep = cep.replace(/[!@#$%^&*a-zA-Z.-]/gi, '');\n\n    if (/\\d{8}/.test(cep)) {\n      return this.http.get(this.urlFetchByCEP(cep));\n    }\n\n    subject.error(\n      new HttpErrorResponse({\n        status: 412,\n        statusText: 'Precondition failed',\n        error: { code: 1, message: 'length must be equals 8' }\n      })\n    );\n    return subject.asObservable();\n  };\n\n  public fetchByAddressSaoPaulo = (address: string): Observable<any> => {\n    return this.http.get(this.urlFetchByAddressSP(address));\n  };\n\n  public fetchByAddress = (\n    state: string,\n    city: string,\n    address: string\n  ): Observable<any> => {\n    return this.http.get(this.urlFetchByAddressSP(address, state, city));\n  };\n}\n","import { HttpClient } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { NgxViaCepConfiguration } from './ngx-via-cep.configuration';\nimport { NgxViaCepService } from './ngx-via-cep.service';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [],\n  providers: [NgxViaCepService]\n})\nexport class NgxViaCepModule {\n  public static forRoot(\n    configurationFactory: () => NgxViaCepConfiguration\n  ): ModuleWithProviders {\n    return {\n      ngModule: NgxViaCepModule,\n      providers: [\n        { provide: NgxViaCepConfiguration, useFactory: configurationFactory }\n      ]\n    };\n  }\n\n  constructor(\n    @Optional() @SkipSelf() parentModule: NgxViaCepModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error(\n        'NgxViaCepModule is already loaded. Import in your base AppModule only.'\n      );\n    }\n    if (!http) {\n      throw new Error(\n        'You need to import the HttpClientModule in your AppModule! \\n' +\n          'See also https://github.com/angular/angular/issues/20575'\n      );\n    }\n  }\n}\n"],"names":["InjectionToken","http","HttpHeaders","Subject","HttpErrorResponse","Injectable","HttpClient","Optional","Inject","NgModule","SkipSelf"],"mappings":"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"}
