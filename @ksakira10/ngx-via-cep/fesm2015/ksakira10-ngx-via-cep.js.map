{"version":3,"file":"ksakira10-ngx-via-cep.js.map","sources":["ng://@ksakira10/ngx-via-cep/lib/ngx-via-cep.variables.ts","ng://@ksakira10/ngx-via-cep/lib/ngx-via-cep.configuration.ts","ng://@ksakira10/ngx-via-cep/lib/ngx-via-cep.service.ts","ng://@ksakira10/ngx-via-cep/lib/ngx-via-cep.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface NgxViaCepConfigurationParameters {\n  apiKeys?: {[ key: string ]: string};\n  username?: string;\n  password?: string;\n  accessToken?: string | (() => string);\n  basePath?: string;\n  withCredentials?: boolean;\n}\n\nexport class NgxViaCepConfiguration {\n  apiKeys?: {[ key: string ]: string};\n  username?: string;\n  password?: string;\n  accessToken?: string | (() => string);\n  basePath?: string;\n  withCredentials?: boolean;\n\n  constructor(configurationParameters: NgxViaCepConfigurationParameters = {}) {\n      this.apiKeys = configurationParameters.apiKeys;\n      this.username = configurationParameters.username;\n      this.password = configurationParameters.password;\n      this.accessToken = configurationParameters.accessToken;\n      this.basePath = configurationParameters.basePath;\n      this.withCredentials = configurationParameters.withCredentials;\n  }\n\n  /**\n   * Select the correct content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param contentTypes - the array of content types that are available for selection\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  public selectHeaderContentType (contentTypes: string[]): string | undefined {\n      if (contentTypes.length == 0) {\n          return undefined;\n      }\n\n      let type = contentTypes.find(x => this.isJsonMime(x));\n      if (type === undefined) {\n          return contentTypes[0];\n      }\n      return type;\n  }\n\n  /**\n   * Select the correct accept content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param accepts - the array of content types that are available for selection.\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  public selectHeaderAccept(accepts: string[]): string | undefined {\n      if (accepts.length == 0) {\n          return undefined;\n      }\n\n      let type = accepts.find(x => this.isJsonMime(x));\n      if (type === undefined) {\n          return accepts[0];\n      }\n      return type;\n  }\n\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  public isJsonMime(mime: string): boolean {\n      const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n      return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n}\n","import {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders\n} from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { NgxViaCepConfiguration } from './ngx-via-cep.configuration';\nimport { BASE_PATH } from './ngx-via-cep.variables';\n\n@Injectable()\nexport class NgxViaCepService {\n  protected basePath = 'https://viacep.com.br/ws';\n  public defaultHeaders = new HttpHeaders();\n  public configuration = new NgxViaCepConfiguration();\n  private readonly urlFetchByCEP = (cep: string) =>\n    `${this.basePath}/${cep}/json/`;\n  private readonly urlFetchByAddressSP = (\n    address: string,\n    state: string = 'SP',\n    city: string = 'SÃ£o Paulo'\n  ) =>\n    `${this.basePath}/${encodeURIComponent(state)}/${encodeURIComponent(\n      city\n    )}/${encodeURIComponent(address)}/json/`;\n\n  constructor(\n    protected http: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: NgxViaCepConfiguration\n  ) {\n    if (basePath) {\n      this.basePath = basePath;\n    }\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = basePath || configuration.basePath || this.basePath;\n    }\n  }\n\n  public fetchByCEP = (cep: string): Observable<any> => {\n    const subject = new Subject<HttpErrorResponse>();\n    cep = cep.replace(/[!@#$%^&*a-zA-Z.-]/gi, '');\n\n    if (/\\d{8}/.test(cep)) {\n      return this.http.get(this.urlFetchByCEP(cep));\n    }\n\n    subject.error(\n      new HttpErrorResponse({\n        status: 412,\n        statusText: 'Precondition failed',\n        error: { code: 1, message: 'length must be equals 8' }\n      })\n    );\n    return subject.asObservable();\n  };\n\n  public fetchByAddressSaoPaulo = (address: string): Observable<any> => {\n    return this.http.get(this.urlFetchByAddressSP(address));\n  };\n\n  public fetchByAddress = (\n    state: string,\n    city: string,\n    address: string\n  ): Observable<any> => {\n    return this.http.get(this.urlFetchByAddressSP(address, state, city));\n  };\n}\n","import { HttpClient } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { NgxViaCepConfiguration } from './ngx-via-cep.configuration';\nimport { NgxViaCepService } from './ngx-via-cep.service';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [],\n  providers: [NgxViaCepService]\n})\nexport class NgxViaCepModule {\n  public static forRoot(\n    configurationFactory: () => NgxViaCepConfiguration\n  ): ModuleWithProviders {\n    return {\n      ngModule: NgxViaCepModule,\n      providers: [\n        { provide: NgxViaCepConfiguration, useFactory: configurationFactory }\n      ]\n    };\n  }\n\n  constructor(\n    @Optional() @SkipSelf() parentModule: NgxViaCepModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error(\n        'NgxViaCepModule is already loaded. Import in your base AppModule only.'\n      );\n    }\n    if (!http) {\n      throw new Error(\n        'You need to import the HttpClientModule in your AppModule! \\n' +\n          'See also https://github.com/angular/angular/issues/20575'\n      );\n    }\n  }\n}\n"],"names":[],"mappings":"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"}
